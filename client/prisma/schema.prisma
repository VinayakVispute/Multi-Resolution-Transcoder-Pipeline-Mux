// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  clerkId          String          @unique
  name             String
  userName         String          @unique
  email            String
  picture          String          @default("https://res.cloudinary.com/dkawvablj/image/upload/v1725119468/Core/mwpxqnn5viel4zddmng7.jpg")
  joinedAt         DateTime        @default(now())
  maxVideosAllowed Int             @default(1)
  videosUploaded   Int             @default(0)
  apiKey           String?         @unique
  UploadedVideo    UploadedVideo[]
  Notifications    Notifications[]
}

model Video {
  id              Int               @id @default(autoincrement())
  title           String
  videoUrl        String
  uploadedAt      DateTime          @default(now())
  resolution      String
  UploadedVideo   UploadedVideo[]
  TranscodedVideo TranscodedVideo[]
}

model UploadedVideo {
  id              String            @id
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  status          Status            @default(PENDING)
  video           Video             @relation(fields: [videoId], references: [id])
  videoId         Int
  TranscodedVideo TranscodedVideo[]
  uploadedAt      DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  Notifications   Notifications[]
}

model TranscodedVideo {
  id            String        @id @default(uuid())
  transcodedAt  DateTime      @default(now())
  sourceVideo   UploadedVideo @relation(fields: [sourceVideoId], references: [id])
  sourceVideoId String
  video         Video         @relation(fields: [videoId], references: [id])
  videoId       Int
  uploadedAt    DateTime      @updatedAt
}

enum Status {
  PENDING
  FINISHED
  FAILED
}

enum Event {
  NEW_VIDEO
  TRANSCODED_VIDEO
}

enum EventStatus {
  FINISHED
  FAILED
}

model Notifications {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  uploadedVideo   UploadedVideo @relation(fields: [uploadedVideoId], references: [id])
  uploadedVideoId String
  event           EventStatus
  read            Boolean       @default(false)
  createdAt       DateTime      @default(now())
}
